import tables
import strformat

import ../../graph.nim
import ../../exception.nim

proc hits*(
    dg: DirectedGraph,
    maxIter: int = 100,
    tol: float = 1.0e-8,
    nstart: TableRef[Node, float] = nil,
    normalized: bool = true
): tuple[hubs: Table[Node, float], authorities: Table[Node, float]] =
    if dg.len() == 0:
        return (initTable[Node, float](), initTable[Node, float]())
    var h: Table[Node, float] = initTable[Node, float]()
    var a: Table[Node, float] = initTable[Node, float]()
    if nstart == nil:
        for node in dg.nodes():
            h[node] = 1.0 / float(dg.numberOfNodes())
    else:
        var s = 0.0
        for val in nstart[].values():
            s += val
        s = 1.0 / s
        for (node, val) in nstart[].pairs():
            h[node] = val * s

    var isConverged = false
    for i in 0..<maxIter:
        var hlast = h
        for k in hlast.keys():
            h[k] = 0.0
        for k in hlast.keys():
            a[k] = 0.0
        for n in h.keys():
            for nbr in dg.neighbors(n):
                a[nbr] += hlast[n]
        for n in h.keys():
            for nbr in dg.neighbors(n):
                h[n] += a[nbr]
        var s = 0.0
        for val in h.values():
            s = max(s, val)
        s = 1.0 / s
        for n in h.keys():
            h[n] *= s
        for val in a.values():
            s = max(s, val)
        s = 1.0 / s
        for n in a.keys():
            a[n] *= s
        var err = 0.0
        for n in h.keys():
            err += abs(h[n] - hlast[n])
        if err < tol:
            isConverged = true
            break

    if isConverged:
        if normalized:
            var s = 0.0
            for val in a.values():
                s += val
            s = 1.0 / s
            for n in a.keys():
                a[n] *= s
            s = 0.0
            for val in h.values():
                s += val
            s = 1.0 / s
            for n in h.keys():
                h[n] *= s
        return (h, a)
    else:
        raise newZNetPowerIterationFailedConvergence(maxIter)



proc hits*(
    g: Graph,
    maxIter: int = 100,
    tol: float = 1.0e-8,
    nstart: TableRef[Node, float] = nil,
    normalized: bool = true
): tuple[hubs: Table[Node, float], authorities: Table[Node, float]] =
    return g.toDirected()
            .hits(
                maxIter=maxIter,
                tol=tol,
                nstart=nstart,
                normalized=normalized
            )

when isMainModule:
    let edges = @[
        (0, 1), (0, 2), (0, 3), (0, 4), (0, 5),
        (0, 6), (0, 7), (0, 8), (0, 10), (0, 11),
        (0, 12), (0, 13), (0, 17), (0, 19), (0, 21),
        (0, 31), (1, 2), (1, 3), (1, 7), (1, 13),
        (1, 17), (1, 19), (1, 21), (1, 30), (2, 3),
        (2, 7), (2, 8), (2, 9), (2, 13), (2, 27),
        (2, 28), (2, 32), (3, 7), (3, 12), (3, 13),
        (4, 6), (4, 10), (5, 6), (5, 10), (5, 16),
        (6, 16), (8, 30), (8, 32), (8, 33), (9, 33),
        (13, 33), (14, 32), (14, 33), (15, 32),
        (15, 33), (18, 32), (18, 33), (19, 33),
        (20, 32), (20, 33), (22, 32), (22, 33),
        (23, 25), (23, 27), (23, 29), (23, 32),
        (23, 33), (24, 25), (24, 27), (24, 31),
        (25, 31), (26, 29), (26, 33), (27, 33),
        (28, 31), (28, 33), (29, 32), (29, 33),
        (30, 32), (30, 33), (31, 32), (31, 33),
        (32, 33)
    ]
    var G = newGraph()
    G.addEdgesFrom(edges)
    let ret0 = hits(G).hubs
    let nxRet0: Table[Node, float]
        = {
            0: 0.07141272875773574,
            1: 0.05342723120517262,
            2: 0.06371906453963269,
            3: 0.04242273710428977,
            4: 0.015260959698152663,
            5: 0.01596691349441855,
            6: 0.01596691349441855,
            7: 0.03434316720679744,
            8: 0.045681925130806315,
            10: 0.015260959698152663,
            11: 0.010617891508520511,
            12: 0.016925450785435992,
            13: 0.045494864066005475,
            17: 0.018561637031907365,
            19: 0.0297133338911154,
            21: 0.018561637031907365,
            31: 0.03837574188047835,
            30: 0.03510623798827735,
            9: 0.02062566775718263,
            27: 0.026813494127083635,
            28: 0.02633150578337531,
            32: 0.06200184647463987,
            16: 0.004748031841562519,
            33: 0.0750029421463428,
            14: 0.020370345842716082,
            15: 0.020370345842716082,
            18: 0.020370345842716082,
            20: 0.020370345842716082,
            22: 0.020370345842716082,
            23: 0.030156497528902457,
            25: 0.011893664396093682,
            29: 0.02711153964642488,
            24: 0.01146095223013987,
            26: 0.015182734341447214
        }.toTable()
    for (node, val) in ret0.pairs():
        if 1e-15 < abs(val - nxRet0[node]):
            echo(fmt"node {node}: got {val}, expected {nxRet0[node]}")
            echo(fmt"diff={val - nxRet0[node]}")


    let ret1 = hits(G).authorities
    let nxRet1: Table[Node, float]
        = {
            0: 0.07141272880870857,
            1: 0.053427231228703985,
            2: 0.06371906455587137,
            3: 0.042422737106115244,
            4: 0.015260959692251745,
            5: 0.01596691348769785,
            6: 0.01596691348769785,
            7: 0.034343167196785686,
            8: 0.04568192511376612,
            10: 0.015260959692251745,
            11: 0.010617891499780773,
            12: 0.016925450777611123,
            13: 0.04549486404492594,
            17: 0.018561637020091355,
            19: 0.029713333868231613,
            21: 0.018561637020091355,
            31: 0.038375741856463086,
            30: 0.0351062379780833,
            9: 0.02062566774700424,
            27: 0.02681349412210058,
            28: 0.026331505783102074,
            32: 0.062001846535505625,
            16: 0.004748031844529443,
            33: 0.07500294224371072,
            14: 0.020370345827057042,
            15: 0.020370345827057042,
            18: 0.020370345827057042,
            20: 0.020370345827057042,
            22: 0.020370345827057042,
            23: 0.03015649752213886,
            25: 0.011893664411194169,
            29: 0.027111539640980654,
            24: 0.01146095224314779,
            26: 0.015182734336172116
        }.toTable()
    for (node, val) in ret1.pairs():
        if 1e-15 < abs(val - nxRet1[node]):
            echo(fmt"node {node}: got {val}, expected {nxRet0[node]}")
            echo(fmt"diff={val - nxRet1[node]}")

    var DG = newDirectedGraph()
    DG.addEdgesFrom(edges)
    let ret2 = hits(DG).hubs
    let nxRet2
        = {
            0: 0.06900249613946814,
            1: 0.04270746150237102,
            2: 0.06066068418753481,
            3: 0.018161030653464263,
            4: 0.006360305049606291,
            5: 0.006627747532631789,
            6: 0.0002674424830254975,
            7: 0.0,
            8: 0.05810056398366707,
            10: 0.0,
            11: 0.0,
            12: 0.0,
            13: 0.03018393375844863,
            17: 0.0,
            19: 0.03018393375844863,
            21: 0.0,
            31: 0.05419054140264505,
            30: 0.05419054140264505,
            9: 0.03018393375844863,
            27: 0.03018393375844863,
            28: 0.03491311865840331,
            32: 0.03018393375844863,
            16: 0.0,
            33: 0.0,
            14: 0.05419054140264505,
            15: 0.05419054140264505,
            18: 0.05419054140264505,
            20: 0.05419054140264505,
            22: 0.05419054140264505,
            23: 0.06665169382035559,
            25: 0.004729184899954685,
            29: 0.05419054140264505,
            24: 0.013282831700805265,
            26: 0.03409143937530859,
        }.toTable()
    for (node, val) in ret2.pairs():
        if 1e-15 < abs(val - nxRet2[node]):
            echo(fmt"node {node}: got {val}, expected {nxRet1[node]}")
            echo(fmt"diff={val - nxRet2[node]}")

    let ret3 = hits(DG).authorities
    let nxRet3
        = {
            0: 0.0,
            1: 0.018516928339938607,
            2: 0.029977542788768737,
            3: 0.04625593278185558,
            4: 0.018516928339938607,
            5: 0.018516928339938607,
            6: 0.02200229267261003,
            7: 0.051129473914719024,
            8: 0.03479531833302545,
            10: 0.02200229267261003,
            11: 0.018516928339938607,
            12: 0.023390469472802048,
            13: 0.051129473914719024,
            17: 0.029977542788768737,
            19: 0.029977542788768737,
            21: 0.029977542788768737,
            31: 0.032719471616579746,
            30: 0.027051992164899653,
            9: 0.016278389993086843,
            27: 0.03772894562369278,
            28: 0.016278389993086843,
            32: 0.16609279062702278,
            16: 0.0018503350825856322,
            33: 0.2088314127653893,
            14: 0.0,
            15: 0.0,
            18: 0.0,
            20: 0.0,
            22: 0.0,
            23: 0.0,
            25: 0.021450555630605928,
            29: 0.027034578225879995,
            24: 0.0,
            26: 0.0,
        }.toTable()
    for (node, val) in ret3.pairs():
        if 1e-15 < abs(val - nxRet3[node]):
            echo(fmt"node {node}: got {val}, expected {nxRet1[node]}")
            echo(fmt"diff={val - nxRet3[node]}")