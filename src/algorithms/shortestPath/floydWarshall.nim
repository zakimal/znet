import algorithm
import tables

import ../../graph.nim

proc reconstructPath*(
    source: Node,
    target: Node,
    predecessors: Table[Node, Table[Node, Node]]
): seq[Node] =
    if source == target:
        return @[]
    let prev = predecessors[source]
    var curr = prev[target]
    var path = @[target, curr]
    while curr != source:
        curr = prev[curr]
        path.add(curr)
    path.reverse()
    return path

proc floydWarshallPredecessorAndDistance*(
    g: Graph,
    weight: Table[Edge, float] = initTable[Edge, float]()
): tuple[pred: Table[Node, Table[Node, Node]], dist: Table[Node, Table[Node, float]]] =
    var dist = initTable[Node, Table[Node, float]]()
    for u in g.nodes():
        dist[u] = initTable[Node, float]()
        for v in g.nodes():
            if u == v:
                dist[u][v] = 0.0
            else:
                dist[u][v] = Inf

    var pred = initTable[Node, Table[Node, Node]]()
    for u in g.nodes():
        pred[u] = initTable[Node, Node]()

    for (u, v) in g.edges():
        let eWeight = weight.getOrDefault((u, v), 1.0)
        dist[u][v] = min(eWeight, dist[u][v])
        pred[u][v] = u
        dist[v][u] = min(eWeight, dist[v][u])
        pred[v][u] = v
    for w in g.nodes():
        for u in g.nodes():
            for v in g.nodes():
                var d = dist[u][w] + dist[w][v]
                if d < dist[u][v]:
                    dist[u][v] = d
                    pred[u][v] = pred[w][v]
    return (pred, dist)

proc floydWarshallPredecessorAndDistance*(
    dg: DirectedGraph,
    weight: Table[Edge, float] = initTable[Edge, float]()
): tuple[pred: Table[Node, Table[Node, Node]], dist: Table[Node, Table[Node, float]]] =
    var dist = initTable[Node, Table[Node, float]]()
    for u in dg.nodes():
        dist[u] = initTable[Node, float]()
        for v in dg.nodes():
            if u == v:
                dist[u][v] = 0.0
            else:
                dist[u][v] = Inf

    var pred = initTable[Node, Table[Node, Node]]()
    for u in dg.nodes():
        pred[u] = initTable[Node, Node]()

    for (u, v) in dg.edges():
        let eWeight = weight.getOrDefault((u, v), 1.0)
        dist[u][v] = min(eWeight, dist[u][v])
        pred[u][v] = u

    for w in dg.nodes():
        for u in dg.nodes():
            for v in dg.nodes():
                var d = dist[u][w] + dist[w][v]
                if d < dist[u][v]:
                    dist[u][v] = d
                    pred[u][v] = pred[w][v]
    return (pred, dist)

proc floydWarshall*(
    g: Graph,
    weight: Table[Edge, float] = initTable[Edge, float]()
): Table[Node, Table[Node, float]] =
    return g.floydWarshallPredecessorAndDistance(weight).dist

proc floydWarshall*(
    dg: DirectedGraph,
    weight: Table[Edge, float] = initTable[Edge, float]()
): Table[Node, Table[Node, float]] =
    return dg.floydWarshallPredecessorAndDistance(weight).dist

when isMainModule:
    block simpleDirectedGraph:
        var DG = newDirectedGraph()
        DG.addEdgesFrom(@[(0, 1), (0, 3), (1, 2), (1, 3), (2, 4), (3, 1), (3, 2), (3, 4), (4, 0), (4, 2)])
        var weight: Table[Edge, float] = {(0, 1): 10.0, (0, 3): 5.0, (1, 2): 1.0, (1, 3): 2.0, (2, 4): 1.0, (3, 1): 3.0, (3, 2): 5.0, (3, 4): 2.0, (4, 0): 7.0, (4, 2): 6.0}.toTable()
        let (predecessors, _) = DG.floydWarshallPredecessorAndDistance(weight)
        doAssert reconstructPath(0, 2, predecessors) == @[0, 3, 1, 2]

    block karateGraph:
        var karate = newGraph()
        karate.addEdgesFrom(@[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (14, 32), (14, 33), (15, 32), (15, 33), (18, 32), (18, 33), (19, 33), (20, 32), (20, 33), (22, 32), (22, 33), (23, 25), (23, 27), (23, 29), (23, 32), (23, 33), (24, 25), (24, 27), (24, 31), (25, 31), (26, 29), (26, 33), (27, 33), (28, 31), (28, 33), (29, 32), (29, 33), (30, 32), (30, 33), (31, 32), (31, 33), (32, 33)])
        let (pred, dist) = karate.floydWarshallPredecessorAndDistance()
        let nxPred =
            {
                0: {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 10: 0, 11: 0, 12: 0, 13: 0, 17: 0, 19: 0, 21: 0, 31: 0, 30: 1, 9: 2, 27: 2, 28: 2, 32: 2, 16: 5, 33: 8, 23: 27, 24: 31, 25: 31, 29: 32, 26: 33, 14: 32, 15: 32, 18: 32, 20: 32, 22: 32}.toTable(),
                1: {0: 1, 2: 1, 3: 1, 7: 1, 13: 1, 17: 1, 19: 1, 21: 1, 30: 1, 4: 0, 5: 0, 6: 0, 8: 0, 10: 0, 11: 0, 12: 0, 31: 0, 9: 2, 27: 2, 28: 2, 32: 2, 16: 5, 33: 13, 23: 27, 24: 27, 25: 31, 29: 32, 26: 33, 14: 32, 15: 32, 18: 32, 20: 32, 22: 32}.toTable(),
                2: {0: 2, 1: 2, 3: 2, 7: 2, 8: 2, 9: 2, 13: 2, 27: 2, 28: 2, 32: 2, 4: 0, 5: 0, 6: 0, 10: 0, 11: 0, 12: 0, 17: 0, 19: 0, 21: 0, 31: 0, 30: 1, 16: 5, 33: 8, 23: 27, 24: 27, 25: 23, 29: 32, 26: 29, 14: 32, 15: 32, 18: 32, 20: 32, 22: 32}.toTable(),
                3: {0: 3, 1: 3, 2: 3, 7: 3, 12: 3, 13: 3, 4: 0, 5: 0, 6: 0, 8: 0, 10: 0, 11: 0, 17: 0, 19: 0, 21: 0, 31: 0, 30: 1, 9: 2, 27: 2, 28: 2, 32: 2, 16: 5, 33: 13, 23: 27, 24: 27, 25: 31, 29: 32, 26: 33, 14: 32, 15: 32, 18: 32, 20: 32, 22: 32}.toTable(),
                4: {0: 4, 6: 4, 10: 4, 1: 0, 2: 0, 3: 0, 5: 0, 7: 0, 8: 0, 11: 0, 12: 0, 13: 0, 17: 0, 19: 0, 21: 0, 31: 0, 30: 1, 9: 2, 27: 2, 28: 2, 32: 2, 16: 6, 33: 8, 23: 27, 24: 31, 25: 31, 29: 32, 26: 33, 14: 32, 15: 32, 18: 32, 20: 32, 22: 32}.toTable(),
                5: {0: 5, 6: 5, 10: 5, 16: 5, 1: 0, 2: 0, 3: 0, 4: 0, 7: 0, 8: 0, 11: 0, 12: 0, 13: 0, 17: 0, 19: 0, 21: 0, 31: 0, 30: 1, 9: 2, 27: 2, 28: 2, 32: 2, 33: 8, 23: 27, 24: 31, 25: 31, 29: 32, 26: 33, 14: 32, 15: 32, 18: 32, 20: 32, 22: 32}.toTable(),
                6: {0: 6, 4: 6, 5: 6, 16: 6, 1: 0, 2: 0, 3: 0, 7: 0, 8: 0, 10: 0, 11: 0, 12: 0, 13: 0, 17: 0, 19: 0, 21: 0, 31: 0, 30: 1, 9: 2, 27: 2, 28: 2, 32: 2, 33: 8, 23: 27, 24: 31, 25: 31, 29: 32, 26: 33, 14: 32, 15: 32, 18: 32, 20: 32, 22: 32}.toTable(),
                7: {0: 7, 1: 7, 2: 7, 3: 7, 4: 0, 5: 0, 6: 0, 8: 0, 10: 0, 11: 0, 12: 0, 13: 0, 17: 0, 19: 0, 21: 0, 31: 0, 30: 1, 9: 2, 27: 2, 28: 2, 32: 2, 16: 5, 33: 8, 23: 27, 24: 27, 25: 31, 29: 32, 26: 29, 14: 32, 15: 32, 18: 32, 20: 32, 22: 32}.toTable(),
                8: {0: 8, 2: 8, 30: 8, 32: 8, 33: 8, 1: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 10: 0, 11: 0, 12: 0, 13: 0, 17: 0, 19: 0, 21: 0, 31: 0, 9: 2, 27: 2, 28: 2, 16: 5, 23: 32, 24: 27, 25: 31, 29: 32, 26: 33, 14: 32, 15: 32, 18: 32, 20: 32, 22: 32}.toTable(),
                10: {0: 10, 4: 10, 5: 10, 1: 0, 2: 0, 3: 0, 6: 0, 7: 0, 8: 0, 11: 0, 12: 0, 13: 0, 17: 0, 19: 0, 21: 0, 31: 0, 30: 1, 9: 2, 27: 2, 28: 2, 32: 2, 16: 5, 33: 8, 23: 27, 24: 31, 25: 31, 29: 32, 26: 33, 14: 32, 15: 32, 18: 32, 20: 32, 22: 32}.toTable(),
                11: {0: 11, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 10: 0, 12: 0, 13: 0, 17: 0, 19: 0, 21: 0, 31: 0, 30: 1, 9: 2, 27: 2, 28: 2, 32: 2, 16: 5, 33: 8, 23: 27, 24: 31, 25: 31, 29: 32, 26: 33, 14: 32, 15: 32, 18: 32, 20: 32, 22: 32}.toTable(),
                12: {0: 12, 3: 12, 1: 0, 2: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 10: 0, 11: 0, 13: 0, 17: 0, 19: 0, 21: 0, 31: 0, 30: 1, 9: 2, 27: 2, 28: 2, 32: 2, 16: 5, 33: 8, 23: 27, 24: 31, 25: 31, 29: 32, 26: 33, 14: 32, 15: 32, 18: 32, 20: 32, 22: 32}.toTable(),
                13: {0: 13, 1: 13, 2: 13, 3: 13, 33: 13, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 10: 0, 11: 0, 12: 0, 17: 0, 19: 0, 21: 0, 31: 0, 30: 1, 9: 2, 27: 2, 28: 2, 32: 2, 16: 5, 23: 33, 24: 27, 25: 31, 29: 33, 26: 33, 14: 33, 15: 33, 18: 33, 20: 33, 22: 33}.toTable(),
                17: {0: 17, 1: 17, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 10: 0, 11: 0, 12: 0, 13: 0, 19: 0, 21: 0, 31: 0, 30: 1, 9: 2, 27: 2, 28: 2, 32: 2, 16: 5, 33: 8, 23: 27, 24: 31, 25: 31, 29: 32, 26: 33, 14: 32, 15: 32, 18: 32, 20: 32, 22: 32}.toTable(),
                19: {0: 19, 1: 19, 33: 19, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 10: 0, 11: 0, 12: 0, 13: 0, 17: 0, 21: 0, 31: 0, 30: 1, 9: 33, 27: 33, 28: 33, 32: 33, 16: 5, 23: 33, 24: 31, 25: 31, 29: 33, 26: 33, 14: 33, 15: 33, 18: 33, 20: 33, 22: 33}.toTable(),
                21: {0: 21, 1: 21, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 10: 0, 11: 0, 12: 0, 13: 0, 17: 0, 19: 0, 31: 0, 30: 1, 9: 2, 27: 2, 28: 2, 32: 2, 16: 5, 33: 8, 23: 27, 24: 31, 25: 31, 29: 32, 26: 33, 14: 32, 15: 32, 18: 32, 20: 32, 22: 32}.toTable(),
                31: {0: 31, 24: 31, 25: 31, 28: 31, 32: 31, 33: 31, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 10: 0, 11: 0, 12: 0, 13: 0, 17: 0, 19: 0, 21: 0, 30: 32, 9: 33, 27: 24, 16: 5, 23: 25, 29: 32, 26: 33, 14: 32, 15: 32, 18: 32, 20: 32, 22: 32}.toTable(),
                30: {1: 30, 8: 30, 32: 30, 33: 30, 0: 1, 2: 1, 3: 1, 4: 0, 5: 0, 6: 0, 7: 1, 10: 0, 11: 0, 12: 0, 13: 1, 17: 1, 19: 1, 21: 1, 31: 32, 9: 33, 27: 33, 28: 33, 16: 5, 23: 32, 24: 31, 25: 23, 29: 32, 26: 33, 14: 32, 15: 32, 18: 32, 20: 32, 22: 32}.toTable(),
                9: {2: 9, 33: 9, 0: 2, 1: 2, 3: 2, 4: 0, 5: 0, 6: 0, 7: 2, 8: 2, 10: 0, 11: 0, 12: 0, 13: 2, 17: 0, 19: 33, 21: 0, 27: 2, 28: 2, 30: 33, 31: 33, 32: 2, 16: 5, 23: 33, 24: 27, 25: 23, 29: 33, 26: 33, 14: 33, 15: 33, 18: 33, 20: 33, 22: 33}.toTable(),
                27: {2: 27, 23: 27, 24: 27, 33: 27, 0: 2, 1: 2, 3: 2, 4: 0, 5: 0, 6: 0, 7: 2, 8: 2, 9: 2, 10: 0, 11: 0, 12: 0, 13: 2, 17: 0, 19: 33, 21: 0, 28: 2, 30: 33, 31: 24, 32: 2, 16: 5, 25: 23, 29: 23, 26: 33, 14: 33, 15: 33, 18: 33, 20: 33, 22: 33}.toTable(),
                28: {2: 28, 31: 28, 33: 28, 0: 2, 1: 2, 3: 2, 4: 0, 5: 0, 6: 0, 7: 2, 8: 2, 9: 2, 10: 0, 11: 0, 12: 0, 13: 2, 17: 0, 19: 33, 21: 0, 27: 2, 30: 33, 32: 2, 16: 5, 23: 33, 24: 31, 25: 31, 29: 33, 26: 33, 14: 33, 15: 33, 18: 33, 20: 33, 22: 33}.toTable(),
                32: {2: 32, 8: 32, 14: 32, 15: 32, 18: 32, 20: 32, 22: 32, 23: 32, 29: 32, 30: 32, 31: 32, 33: 32, 0: 2, 1: 2, 3: 2, 4: 0, 5: 0, 6: 0, 7: 2, 9: 2, 10: 0, 11: 0, 12: 0, 13: 2, 17: 0, 19: 33, 21: 0, 27: 2, 28: 2, 16: 5, 25: 23, 24: 31, 26: 29}.toTable(),
                16: {5: 16, 6: 16, 0: 5, 1: 0, 2: 0, 3: 0, 4: 6, 7: 0, 8: 0, 9: 2, 10: 5, 11: 0, 12: 0, 13: 0, 17: 0, 19: 0, 21: 0, 27: 2, 28: 2, 30: 1, 31: 0, 32: 2, 33: 8, 23: 27, 24: 31, 25: 31, 29: 32, 26: 33, 14: 32, 15: 32, 18: 32, 20: 32, 22: 32}.toTable(),
                33: {8: 33, 9: 33, 13: 33, 14: 33, 15: 33, 18: 33, 19: 33, 20: 33, 22: 33, 23: 33, 26: 33, 27: 33, 28: 33, 29: 33, 30: 33, 31: 33, 32: 33, 0: 8, 1: 13, 2: 8, 3: 13, 4: 0, 5: 0, 6: 0, 7: 0, 10: 0, 11: 0, 12: 0, 16: 5, 17: 0, 21: 0, 25: 23, 24: 27}.toTable(),
                14: {32: 14, 33: 14, 0: 2, 1: 2, 2: 32, 3: 2, 4: 0, 5: 0, 6: 0, 7: 2, 8: 32, 9: 33, 10: 0, 11: 0, 12: 0, 13: 33, 15: 32, 16: 5, 17: 0, 18: 32, 19: 33, 20: 32, 21: 0, 22: 32, 23: 32, 24: 31, 25: 23, 26: 33, 27: 33, 28: 33, 29: 32, 30: 32, 31: 32}.toTable(),
                15: {32: 15, 33: 15, 0: 2, 1: 2, 2: 32, 3: 2, 4: 0, 5: 0, 6: 0, 7: 2, 8: 32, 9: 33, 10: 0, 11: 0, 12: 0, 13: 33, 14: 32, 16: 5, 17: 0, 18: 32, 19: 33, 20: 32, 21: 0, 22: 32, 23: 32, 24: 31, 25: 23, 26: 33, 27: 33, 28: 33, 29: 32, 30: 32, 31: 32}.toTable(),
                18: {32: 18, 33: 18, 0: 2, 1: 2, 2: 32, 3: 2, 4: 0, 5: 0, 6: 0, 7: 2, 8: 32, 9: 33, 10: 0, 11: 0, 12: 0, 13: 33, 14: 32, 15: 32, 16: 5, 17: 0, 19: 33, 20: 32, 21: 0, 22: 32, 23: 32, 24: 31, 25: 23, 26: 33, 27: 33, 28: 33, 29: 32, 30: 32, 31: 32}.toTable(),
                20: {32: 20, 33: 20, 0: 2, 1: 2, 2: 32, 3: 2, 4: 0, 5: 0, 6: 0, 7: 2, 8: 32, 9: 33, 10: 0, 11: 0, 12: 0, 13: 33, 14: 32, 15: 32, 16: 5, 17: 0, 18: 32, 19: 33, 21: 0, 22: 32, 23: 32, 24: 31, 25: 23, 26: 33, 27: 33, 28: 33, 29: 32, 30: 32, 31: 32}.toTable(),
                22: {32: 22, 33: 22, 0: 2, 1: 2, 2: 32, 3: 2, 4: 0, 5: 0, 6: 0, 7: 2, 8: 32, 9: 33, 10: 0, 11: 0, 12: 0, 13: 33, 14: 32, 15: 32, 16: 5, 17: 0, 18: 32, 19: 33, 20: 32, 21: 0, 23: 32, 24: 31, 25: 23, 26: 33, 27: 33, 28: 33, 29: 32, 30: 32, 31: 32}.toTable(),
                23: {25: 23, 27: 23, 29: 23, 32: 23, 33: 23, 24: 25, 31: 25, 0: 2, 1: 2, 2: 27, 3: 2, 4: 0, 5: 0, 6: 0, 7: 2, 8: 32, 9: 33, 10: 0, 11: 0, 12: 0, 13: 33, 16: 5, 17: 0, 19: 33, 21: 0, 28: 33, 30: 32, 26: 29, 14: 32, 15: 32, 18: 32, 20: 32, 22: 32}.toTable(),
                25: {23: 25, 24: 25, 31: 25, 27: 23, 29: 23, 32: 23, 33: 23, 0: 31, 1: 0, 2: 27, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 33, 10: 0, 11: 0, 12: 0, 13: 0, 16: 5, 17: 0, 19: 0, 21: 0, 28: 31, 30: 32, 26: 29, 14: 32, 15: 32, 18: 32, 20: 32, 22: 32}.toTable(),
                29: {23: 29, 26: 29, 32: 29, 33: 29, 25: 23, 27: 23, 24: 25, 31: 32, 0: 2, 1: 2, 2: 32, 3: 2, 4: 0, 5: 0, 6: 0, 7: 2, 8: 32, 9: 33, 10: 0, 11: 0, 12: 0, 13: 33, 16: 5, 17: 0, 19: 33, 21: 0, 28: 33, 30: 32, 14: 32, 15: 32, 18: 32, 20: 32, 22: 32}.toTable(),
                24: {25: 24, 27: 24, 31: 24, 23: 25, 29: 23, 32: 31, 33: 27, 0: 31, 1: 2, 2: 27, 3: 2, 4: 0, 5: 0, 6: 0, 7: 2, 8: 2, 9: 2, 10: 0, 11: 0, 12: 0, 13: 2, 16: 5, 17: 0, 19: 0, 21: 0, 28: 31, 30: 32, 26: 33, 14: 32, 15: 32, 18: 32, 20: 32, 22: 32}.toTable(),
                26: {29: 26, 33: 26, 0: 8, 1: 13, 2: 32, 3: 13, 4: 0, 5: 0, 6: 0, 7: 2, 8: 33, 9: 33, 10: 0, 11: 0, 12: 0, 13: 33, 16: 5, 17: 0, 19: 33, 21: 0, 23: 29, 24: 27, 25: 23, 27: 33, 28: 33, 30: 33, 31: 33, 32: 29, 14: 33, 15: 33, 18: 33, 20: 33, 22: 33}.toTable(),
            }.toTable()
        let nxDist: Table[Node, Table[Node, float]] =
            {
                0: {0: 0.0, 1: 1.0, 2: 1.0, 3: 1.0, 4: 1.0, 5: 1.0, 6: 1.0, 7: 1.0, 8: 1.0, 10: 1.0, 11: 1.0, 12: 1.0, 13: 1.0, 17: 1.0, 19: 1.0, 21: 1.0, 31: 1.0, 9: 2.0, 14: 3.0, 15: 3.0, 16: 2.0, 18: 3.0, 20: 3.0, 22: 3.0, 23: 3.0, 24: 2.0, 25: 2.0, 26: 3.0, 27: 2.0, 28: 2.0, 29: 3.0, 30: 2.0, 32: 2.0, 33: 2.0}.toTable(),
                1: {1: 0.0, 0: 1.0, 2: 1.0, 3: 1.0, 7: 1.0, 13: 1.0, 17: 1.0, 19: 1.0, 21: 1.0, 30: 1.0, 4: 2.0, 5: 2.0, 6: 2.0, 8: 2.0, 9: 2.0, 10: 2.0, 11: 2.0, 12: 2.0, 14: 3.0, 15: 3.0, 16: 3.0, 18: 3.0, 20: 3.0, 22: 3.0, 23: 3.0, 24: 3.0, 25: 3.0, 26: 3.0, 27: 2.0, 28: 2.0, 29: 3.0, 31: 2.0, 32: 2.0, 33: 2.0}.toTable(),
                2: {2: 0.0, 0: 1.0, 1: 1.0, 3: 1.0, 7: 1.0, 8: 1.0, 9: 1.0, 13: 1.0, 27: 1.0, 28: 1.0, 32: 1.0, 4: 2.0, 5: 2.0, 6: 2.0, 10: 2.0, 11: 2.0, 12: 2.0, 14: 2.0, 15: 2.0, 16: 3.0, 17: 2.0, 18: 2.0, 19: 2.0, 20: 2.0, 21: 2.0, 22: 2.0, 23: 2.0, 24: 2.0, 25: 3.0, 26: 3.0, 29: 2.0, 30: 2.0, 31: 2.0, 33: 2.0}.toTable(),
                3: {3: 0.0, 0: 1.0, 1: 1.0, 2: 1.0, 7: 1.0, 12: 1.0, 13: 1.0, 4: 2.0, 5: 2.0, 6: 2.0, 8: 2.0, 9: 2.0, 10: 2.0, 11: 2.0, 14: 3.0, 15: 3.0, 16: 3.0, 17: 2.0, 18: 3.0, 19: 2.0, 20: 3.0, 21: 2.0, 22: 3.0, 23: 3.0, 24: 3.0, 25: 3.0, 26: 3.0, 27: 2.0, 28: 2.0, 29: 3.0, 30: 2.0, 31: 2.0, 32: 2.0, 33: 2.0}.toTable(),
                4: {4: 0.0, 0: 1.0, 6: 1.0, 10: 1.0, 1: 2.0, 2: 2.0, 3: 2.0, 5: 2.0, 7: 2.0, 8: 2.0, 9: 3.0, 11: 2.0, 12: 2.0, 13: 2.0, 14: 4.0, 15: 4.0, 16: 2.0, 17: 2.0, 18: 4.0, 19: 2.0, 20: 4.0, 21: 2.0, 22: 4.0, 23: 4.0, 24: 3.0, 25: 3.0, 26: 4.0, 27: 3.0, 28: 3.0, 29: 4.0, 30: 3.0, 31: 2.0, 32: 3.0, 33: 3.0}.toTable(),
                5: {5: 0.0, 0: 1.0, 6: 1.0, 10: 1.0, 16: 1.0, 1: 2.0, 2: 2.0, 3: 2.0, 4: 2.0, 7: 2.0, 8: 2.0, 9: 3.0, 11: 2.0, 12: 2.0, 13: 2.0, 14: 4.0, 15: 4.0, 17: 2.0, 18: 4.0, 19: 2.0, 20: 4.0, 21: 2.0, 22: 4.0, 23: 4.0, 24: 3.0, 25: 3.0, 26: 4.0, 27: 3.0, 28: 3.0, 29: 4.0, 30: 3.0, 31: 2.0, 32: 3.0, 33: 3.0}.toTable(),
                6: {6: 0.0, 0: 1.0, 4: 1.0, 5: 1.0, 16: 1.0, 1: 2.0, 2: 2.0, 3: 2.0, 7: 2.0, 8: 2.0, 9: 3.0, 10: 2.0, 11: 2.0, 12: 2.0, 13: 2.0, 14: 4.0, 15: 4.0, 17: 2.0, 18: 4.0, 19: 2.0, 20: 4.0, 21: 2.0, 22: 4.0, 23: 4.0, 24: 3.0, 25: 3.0, 26: 4.0, 27: 3.0, 28: 3.0, 29: 4.0, 30: 3.0, 31: 2.0, 32: 3.0, 33: 3.0}.toTable(),
                7: {7: 0.0, 0: 1.0, 1: 1.0, 2: 1.0, 3: 1.0, 4: 2.0, 5: 2.0, 6: 2.0, 8: 2.0, 9: 2.0, 10: 2.0, 11: 2.0, 12: 2.0, 13: 2.0, 14: 3.0, 15: 3.0, 16: 3.0, 17: 2.0, 18: 3.0, 19: 2.0, 20: 3.0, 21: 2.0, 22: 3.0, 23: 3.0, 24: 3.0, 25: 3.0, 26: 4.0, 27: 2.0, 28: 2.0, 29: 3.0, 30: 2.0, 31: 2.0, 32: 2.0, 33: 3.0}.toTable(),
                8: {8: 0.0, 0: 1.0, 2: 1.0, 30: 1.0, 32: 1.0, 33: 1.0, 1: 2.0, 3: 2.0, 4: 2.0, 5: 2.0, 6: 2.0, 7: 2.0, 9: 2.0, 10: 2.0, 11: 2.0, 12: 2.0, 13: 2.0, 14: 2.0, 15: 2.0, 16: 3.0, 17: 2.0, 18: 2.0, 19: 2.0, 20: 2.0, 21: 2.0, 22: 2.0, 23: 2.0, 24: 3.0, 25: 3.0, 26: 2.0, 27: 2.0, 28: 2.0, 29: 2.0, 31: 2.0}.toTable(),
                9: {9: 0.0, 2: 1.0, 33: 1.0, 0: 2.0, 1: 2.0, 3: 2.0, 4: 3.0, 5: 3.0, 6: 3.0, 7: 2.0, 8: 2.0, 10: 3.0, 11: 3.0, 12: 3.0, 13: 2.0, 14: 2.0, 15: 2.0, 16: 4.0, 17: 3.0, 18: 2.0, 19: 2.0, 20: 2.0, 21: 3.0, 22: 2.0, 23: 2.0, 24: 3.0, 25: 3.0, 26: 2.0, 27: 2.0, 28: 2.0, 29: 2.0, 30: 2.0, 31: 2.0, 32: 2.0}.toTable(),
                10: {10: 0.0, 0: 1.0, 4: 1.0, 5: 1.0, 1: 2.0, 2: 2.0, 3: 2.0, 6: 2.0, 7: 2.0, 8: 2.0, 9: 3.0, 11: 2.0, 12: 2.0, 13: 2.0, 14: 4.0, 15: 4.0, 16: 2.0, 17: 2.0, 18: 4.0, 19: 2.0, 20: 4.0, 21: 2.0, 22: 4.0, 23: 4.0, 24: 3.0, 25: 3.0, 26: 4.0, 27: 3.0, 28: 3.0, 29: 4.0, 30: 3.0, 31: 2.0, 32: 3.0, 33: 3.0}.toTable(),
                11: {11: 0.0, 0: 1.0, 1: 2.0, 2: 2.0, 3: 2.0, 4: 2.0, 5: 2.0, 6: 2.0, 7: 2.0, 8: 2.0, 9: 3.0, 10: 2.0, 12: 2.0, 13: 2.0, 14: 4.0, 15: 4.0, 16: 3.0, 17: 2.0, 18: 4.0, 19: 2.0, 20: 4.0, 21: 2.0, 22: 4.0, 23: 4.0, 24: 3.0, 25: 3.0, 26: 4.0, 27: 3.0, 28: 3.0, 29: 4.0, 30: 3.0, 31: 2.0, 32: 3.0, 33: 3.0}.toTable(),
                12: {12: 0.0, 0: 1.0, 3: 1.0, 1: 2.0, 2: 2.0, 4: 2.0, 5: 2.0, 6: 2.0, 7: 2.0, 8: 2.0, 9: 3.0, 10: 2.0, 11: 2.0, 13: 2.0, 14: 4.0, 15: 4.0, 16: 3.0, 17: 2.0, 18: 4.0, 19: 2.0, 20: 4.0, 21: 2.0, 22: 4.0, 23: 4.0, 24: 3.0, 25: 3.0, 26: 4.0, 27: 3.0, 28: 3.0, 29: 4.0, 30: 3.0, 31: 2.0, 32: 3.0, 33: 3.0}.toTable(),
                13: {13: 0.0, 0: 1.0, 1: 1.0, 2: 1.0, 3: 1.0, 33: 1.0, 4: 2.0, 5: 2.0, 6: 2.0, 7: 2.0, 8: 2.0, 9: 2.0, 10: 2.0, 11: 2.0, 12: 2.0, 14: 2.0, 15: 2.0, 16: 3.0, 17: 2.0, 18: 2.0, 19: 2.0, 20: 2.0, 21: 2.0, 22: 2.0, 23: 2.0, 24: 3.0, 25: 3.0, 26: 2.0, 27: 2.0, 28: 2.0, 29: 2.0, 30: 2.0, 31: 2.0, 32: 2.0}.toTable(),
                14: {14: 0.0, 32: 1.0, 33: 1.0, 0: 3.0, 1: 3.0, 2: 2.0, 3: 3.0, 4: 4.0, 5: 4.0, 6: 4.0, 7: 3.0, 8: 2.0, 9: 2.0, 10: 4.0, 11: 4.0, 12: 4.0, 13: 2.0, 15: 2.0, 16: 5.0, 17: 4.0, 18: 2.0, 19: 2.0, 20: 2.0, 21: 4.0, 22: 2.0, 23: 2.0, 24: 3.0, 25: 3.0, 26: 2.0, 27: 2.0, 28: 2.0, 29: 2.0, 30: 2.0, 31: 2.0}.toTable(),
                15: {15: 0.0, 32: 1.0, 33: 1.0, 0: 3.0, 1: 3.0, 2: 2.0, 3: 3.0, 4: 4.0, 5: 4.0, 6: 4.0, 7: 3.0, 8: 2.0, 9: 2.0, 10: 4.0, 11: 4.0, 12: 4.0, 13: 2.0, 14: 2.0, 16: 5.0, 17: 4.0, 18: 2.0, 19: 2.0, 20: 2.0, 21: 4.0, 22: 2.0, 23: 2.0, 24: 3.0, 25: 3.0, 26: 2.0, 27: 2.0, 28: 2.0, 29: 2.0, 30: 2.0, 31: 2.0}.toTable(),
                16: {16: 0.0, 5: 1.0, 6: 1.0, 0: 2.0, 1: 3.0, 2: 3.0, 3: 3.0, 4: 2.0, 7: 3.0, 8: 3.0, 9: 4.0, 10: 2.0, 11: 3.0, 12: 3.0, 13: 3.0, 14: 5.0, 15: 5.0, 17: 3.0, 18: 5.0, 19: 3.0, 20: 5.0, 21: 3.0, 22: 5.0, 23: 5.0, 24: 4.0, 25: 4.0, 26: 5.0, 27: 4.0, 28: 4.0, 29: 5.0, 30: 4.0, 31: 3.0, 32: 4.0, 33: 4.0}.toTable(),
                17: {17: 0.0, 0: 1.0, 1: 1.0, 2: 2.0, 3: 2.0, 4: 2.0, 5: 2.0, 6: 2.0, 7: 2.0, 8: 2.0, 9: 3.0, 10: 2.0, 11: 2.0, 12: 2.0, 13: 2.0, 14: 4.0, 15: 4.0, 16: 3.0, 18: 4.0, 19: 2.0, 20: 4.0, 21: 2.0, 22: 4.0, 23: 4.0, 24: 3.0, 25: 3.0, 26: 4.0, 27: 3.0, 28: 3.0, 29: 4.0, 30: 2.0, 31: 2.0, 32: 3.0, 33: 3.0}.toTable(),
                18: {18: 0.0, 32: 1.0, 33: 1.0, 0: 3.0, 1: 3.0, 2: 2.0, 3: 3.0, 4: 4.0, 5: 4.0, 6: 4.0, 7: 3.0, 8: 2.0, 9: 2.0, 10: 4.0, 11: 4.0, 12: 4.0, 13: 2.0, 14: 2.0, 15: 2.0, 16: 5.0, 17: 4.0, 19: 2.0, 20: 2.0, 21: 4.0, 22: 2.0, 23: 2.0, 24: 3.0, 25: 3.0, 26: 2.0, 27: 2.0, 28: 2.0, 29: 2.0, 30: 2.0, 31: 2.0}.toTable(),
                19: {19: 0.0, 0: 1.0, 1: 1.0, 33: 1.0, 2: 2.0, 3: 2.0, 4: 2.0, 5: 2.0, 6: 2.0, 7: 2.0, 8: 2.0, 9: 2.0, 10: 2.0, 11: 2.0, 12: 2.0, 13: 2.0, 14: 2.0, 15: 2.0, 16: 3.0, 17: 2.0, 18: 2.0, 20: 2.0, 21: 2.0, 22: 2.0, 23: 2.0, 24: 3.0, 25: 3.0, 26: 2.0, 27: 2.0, 28: 2.0, 29: 2.0, 30: 2.0, 31: 2.0, 32: 2.0}.toTable(),
                20: {20: 0.0, 32: 1.0, 33: 1.0, 0: 3.0, 1: 3.0, 2: 2.0, 3: 3.0, 4: 4.0, 5: 4.0, 6: 4.0, 7: 3.0, 8: 2.0, 9: 2.0, 10: 4.0, 11: 4.0, 12: 4.0, 13: 2.0, 14: 2.0, 15: 2.0, 16: 5.0, 17: 4.0, 18: 2.0, 19: 2.0, 21: 4.0, 22: 2.0, 23: 2.0, 24: 3.0, 25: 3.0, 26: 2.0, 27: 2.0, 28: 2.0, 29: 2.0, 30: 2.0, 31: 2.0}.toTable(),
                21: {21: 0.0, 0: 1.0, 1: 1.0, 2: 2.0, 3: 2.0, 4: 2.0, 5: 2.0, 6: 2.0, 7: 2.0, 8: 2.0, 9: 3.0, 10: 2.0, 11: 2.0, 12: 2.0, 13: 2.0, 14: 4.0, 15: 4.0, 16: 3.0, 17: 2.0, 18: 4.0, 19: 2.0, 20: 4.0, 22: 4.0, 23: 4.0, 24: 3.0, 25: 3.0, 26: 4.0, 27: 3.0, 28: 3.0, 29: 4.0, 30: 2.0, 31: 2.0, 32: 3.0, 33: 3.0}.toTable(),
                22: {22: 0.0, 32: 1.0, 33: 1.0, 0: 3.0, 1: 3.0, 2: 2.0, 3: 3.0, 4: 4.0, 5: 4.0, 6: 4.0, 7: 3.0, 8: 2.0, 9: 2.0, 10: 4.0, 11: 4.0, 12: 4.0, 13: 2.0, 14: 2.0, 15: 2.0, 16: 5.0, 17: 4.0, 18: 2.0, 19: 2.0, 20: 2.0, 21: 4.0, 23: 2.0, 24: 3.0, 25: 3.0, 26: 2.0, 27: 2.0, 28: 2.0, 29: 2.0, 30: 2.0, 31: 2.0}.toTable(),
                23: {23: 0.0, 25: 1.0, 27: 1.0, 29: 1.0, 32: 1.0, 33: 1.0, 0: 3.0, 1: 3.0, 2: 2.0, 3: 3.0, 4: 4.0, 5: 4.0, 6: 4.0, 7: 3.0, 8: 2.0, 9: 2.0, 10: 4.0, 11: 4.0, 12: 4.0, 13: 2.0, 14: 2.0, 15: 2.0, 16: 5.0, 17: 4.0, 18: 2.0, 19: 2.0, 20: 2.0, 21: 4.0, 22: 2.0, 24: 2.0, 26: 2.0, 28: 2.0, 30: 2.0, 31: 2.0}.toTable(),
                24: {24: 0.0, 25: 1.0, 27: 1.0, 31: 1.0, 0: 2.0, 1: 3.0, 2: 2.0, 3: 3.0, 4: 3.0, 5: 3.0, 6: 3.0, 7: 3.0, 8: 3.0, 9: 3.0, 10: 3.0, 11: 3.0, 12: 3.0, 13: 3.0, 14: 3.0, 15: 3.0, 16: 4.0, 17: 3.0, 18: 3.0, 19: 3.0, 20: 3.0, 21: 3.0, 22: 3.0, 23: 2.0, 26: 3.0, 28: 2.0, 29: 3.0, 30: 3.0, 32: 2.0, 33: 2.0}.toTable(),
                25: {25: 0.0, 23: 1.0, 24: 1.0, 31: 1.0, 0: 2.0, 1: 3.0, 2: 3.0, 3: 3.0, 4: 3.0, 5: 3.0, 6: 3.0, 7: 3.0, 8: 3.0, 9: 3.0, 10: 3.0, 11: 3.0, 12: 3.0, 13: 3.0, 14: 3.0, 15: 3.0, 16: 4.0, 17: 3.0, 18: 3.0, 19: 3.0, 20: 3.0, 21: 3.0, 22: 3.0, 26: 3.0, 27: 2.0, 28: 2.0, 29: 2.0, 30: 3.0, 32: 2.0, 33: 2.0}.toTable(),
                26: {26: 0.0, 29: 1.0, 33: 1.0, 0: 3.0, 1: 3.0, 2: 3.0, 3: 3.0, 4: 4.0, 5: 4.0, 6: 4.0, 7: 4.0, 8: 2.0, 9: 2.0, 10: 4.0, 11: 4.0, 12: 4.0, 13: 2.0, 14: 2.0, 15: 2.0, 16: 5.0, 17: 4.0, 18: 2.0, 19: 2.0, 20: 2.0, 21: 4.0, 22: 2.0, 23: 2.0, 24: 3.0, 25: 3.0, 27: 2.0, 28: 2.0, 30: 2.0, 31: 2.0, 32: 2.0}.toTable(),
                27: {27: 0.0, 2: 1.0, 23: 1.0, 24: 1.0, 33: 1.0, 0: 2.0, 1: 2.0, 3: 2.0, 4: 3.0, 5: 3.0, 6: 3.0, 7: 2.0, 8: 2.0, 9: 2.0, 10: 3.0, 11: 3.0, 12: 3.0, 13: 2.0, 14: 2.0, 15: 2.0, 16: 4.0, 17: 3.0, 18: 2.0, 19: 2.0, 20: 2.0, 21: 3.0, 22: 2.0, 25: 2.0, 26: 2.0, 28: 2.0, 29: 2.0, 30: 2.0, 31: 2.0, 32: 2.0}.toTable(),
                28: {28: 0.0, 2: 1.0, 31: 1.0, 33: 1.0, 0: 2.0, 1: 2.0, 3: 2.0, 4: 3.0, 5: 3.0, 6: 3.0, 7: 2.0, 8: 2.0, 9: 2.0, 10: 3.0, 11: 3.0, 12: 3.0, 13: 2.0, 14: 2.0, 15: 2.0, 16: 4.0, 17: 3.0, 18: 2.0, 19: 2.0, 20: 2.0, 21: 3.0, 22: 2.0, 23: 2.0, 24: 2.0, 25: 2.0, 26: 2.0, 27: 2.0, 29: 2.0, 30: 2.0, 32: 2.0}.toTable(),
                29: {29: 0.0, 23: 1.0, 26: 1.0, 32: 1.0, 33: 1.0, 0: 3.0, 1: 3.0, 2: 2.0, 3: 3.0, 4: 4.0, 5: 4.0, 6: 4.0, 7: 3.0, 8: 2.0, 9: 2.0, 10: 4.0, 11: 4.0, 12: 4.0, 13: 2.0, 14: 2.0, 15: 2.0, 16: 5.0, 17: 4.0, 18: 2.0, 19: 2.0, 20: 2.0, 21: 4.0, 22: 2.0, 24: 3.0, 25: 2.0, 27: 2.0, 28: 2.0, 30: 2.0, 31: 2.0}.toTable(),
                30: {30: 0.0, 1: 1.0, 8: 1.0, 32: 1.0, 33: 1.0, 0: 2.0, 2: 2.0, 3: 2.0, 4: 3.0, 5: 3.0, 6: 3.0, 7: 2.0, 9: 2.0, 10: 3.0, 11: 3.0, 12: 3.0, 13: 2.0, 14: 2.0, 15: 2.0, 16: 4.0, 17: 2.0, 18: 2.0, 19: 2.0, 20: 2.0, 21: 2.0, 22: 2.0, 23: 2.0, 24: 3.0, 25: 3.0, 26: 2.0, 27: 2.0, 28: 2.0, 29: 2.0, 31: 2.0}.toTable(),
                31: {31: 0.0, 0: 1.0, 24: 1.0, 25: 1.0, 28: 1.0, 32: 1.0, 33: 1.0, 1: 2.0, 2: 2.0, 3: 2.0, 4: 2.0, 5: 2.0, 6: 2.0, 7: 2.0, 8: 2.0, 9: 2.0, 10: 2.0, 11: 2.0, 12: 2.0, 13: 2.0, 14: 2.0, 15: 2.0, 16: 3.0, 17: 2.0, 18: 2.0, 19: 2.0, 20: 2.0, 21: 2.0, 22: 2.0, 23: 2.0, 26: 2.0, 27: 2.0, 29: 2.0, 30: 2.0}.toTable(),
                32: {32: 0.0, 2: 1.0, 8: 1.0, 14: 1.0, 15: 1.0, 18: 1.0, 20: 1.0, 22: 1.0, 23: 1.0, 29: 1.0, 30: 1.0, 31: 1.0, 33: 1.0, 0: 2.0, 1: 2.0, 3: 2.0, 4: 3.0, 5: 3.0, 6: 3.0, 7: 2.0, 9: 2.0, 10: 3.0, 11: 3.0, 12: 3.0, 13: 2.0, 16: 4.0, 17: 3.0, 19: 2.0, 21: 3.0, 24: 2.0, 25: 2.0, 26: 2.0, 27: 2.0, 28: 2.0}.toTable(),
                33: {33: 0.0, 8: 1.0, 9: 1.0, 13: 1.0, 14: 1.0, 15: 1.0, 18: 1.0, 19: 1.0, 20: 1.0, 22: 1.0, 23: 1.0, 26: 1.0, 27: 1.0, 28: 1.0, 29: 1.0, 30: 1.0, 31: 1.0, 32: 1.0, 0: 2.0, 1: 2.0, 2: 2.0, 3: 2.0, 4: 3.0, 5: 3.0, 6: 3.0, 7: 3.0, 10: 3.0, 11: 3.0, 12: 3.0, 16: 4.0, 17: 3.0, 21: 3.0, 24: 2.0, 25: 2.0}.toTable(),
            }.toTable()
        for u in karate.nodes():
            for v in karate.nodes():
                if u == v:
                    continue
                doAssert pred[u][v] == nxPred[u][v]
        for u in karate.nodes():
            for v in karate.nodes():
                doAssert dist[u][v] == nxDist[u][v]